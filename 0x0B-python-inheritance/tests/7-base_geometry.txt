The ``7-base_geometry`` module
=========================

Using ``integer_validator``
---------------------

This is a text file to test the 7-base_geometry module.  First import
``integer_validator`` from the ``7-base_geometry`` module:

>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Now Use with:

Send Value as string Type
>>> BaseGeometry.integer_validator(BaseGeometry, "name", "John")
Traceback (most recent call last):
TypeError: name must be an integer

Send value = 0 to age
>>> BaseGeometry.integer_validator(BaseGeometry, "age", 0)
Traceback (most recent call last):
ValueError: age must be greater than 0

Send Negative value to distance
>>> BaseGeometry.integer_validator(BaseGeometry, "distance", -4)
Traceback (most recent call last):
ValueError: distance must be greater than 0

Send Valid Values
>>> BaseGeometry.integer_validator(BaseGeometry, "my_int", 12)

>>> BaseGeometry.integer_validator(BaseGeometry, "location", 4)

Send Missing Argument Value
>>> BaseGeometry.integer_validator(BaseGeometry, "width")
Traceback (most recent call last):
TypeError: integer_validator() missing 1 required positional argument: 'value'

Send None Value
>>> BaseGeometry.integer_validator(BaseGeometry, "width", None)
Traceback (most recent call last):
TypeError: width must be an integer

Send 2 arguments as None
>>> BaseGeometry.integer_validator(BaseGeometry, None, None)
Traceback (most recent call last):
TypeError: None must be an integer

Send only self as arguments
>>> BaseGeometry.integer_validator(BaseGeometry)
Traceback (most recent call last):
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

Send 0 arguments
>>> BaseGeometry.integer_validator()
Traceback (most recent call last):
TypeError: integer_validator() missing 3 required positional arguments: 'self', 'name', and 'value'

Send Value as float type
>>> BaseGeometry.integer_validator(BaseGeometry, "location", 1.4)
Traceback (most recent call last):
TypeError: location must be an integer

Send Value as list of integer
>>> BaseGeometry.integer_validator(BaseGeometry, "location", [1, 4])
Traceback (most recent call last):
TypeError: location must be an integer

Send Value as list of lists
>>> BaseGeometry.integer_validator(BaseGeometry, "location", [[1, 2], [2, 3]])
Traceback (most recent call last):
TypeError: location must be an integer
